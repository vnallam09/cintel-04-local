[{"name": "app.py", "content": "\"\"\"\nTeja's Penguin Data Dashboard\n\"\"\"\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_widget\n\n# Import plotly differently for Pyodide compatibility\nfrom plotly import graph_objects as go\nimport plotly.express as px\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = load_penguins().dropna(axis=0)\n\napp_ui =  ui.page_fluid(\n    ui.page_sidebar(\n        ui.sidebar(\n            ui.h2(\"Sidebar\"),\n            ui.input_selectize(\n                \"selected_attribute\",\n                \"Select Attribute\",\n                [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n            ),\n            ui.input_numeric(                \n                \"plotly_bin_count\",\n                \"Number of Plotly Histogram Bins\",\n                10\n            ),\n            ui.input_slider(\n                'seaborn_bin_count',\n                \"Number of Seaborn Histogram Bins\",\n                5, \n                50,\n                10\n            ),\n            ui.input_checkbox_group(\n                \"selected_species\",\n                \"Select Species\",\n                [\"Adelie\", \"Chinstrap\", \"Gentoo\"],\n                selected=[\"Adelie\", \"Chinstrap\", \"Gentoo\"],\n                inline=True\n            ), \n            ui.hr(),\n            ui.a(\n                'Github', \n                href='https://github.com/vnallam09',\n                target= \"_blank\"\n            )            \n        ),\n        ui.layout_columns(\n            ui.h2('Data Frame (Full)'),\n            ui.h3('Data Grid (Filtered by species)')\n        ),\n        ui.layout_columns(       \n            ui.output_data_frame(\"data_table\"),\n            ui.output_data_frame(\"data_grid\")\n        ),\n        ui.layout_columns(\n            output_widget(\"plotly_histogram\"),\n            ui.output_plot(\"seaborn_histogram\")\n        ),\n        ui.card(\n            ui.card_header('Plotly Scatter Plot'),\n            output_widget(\"plotly_scatterplot\"),\n            full_screen=True\n        ),\n        title=\"\ud83d\udc27 Teja's Penguin Data Dashboard\"\n    )\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def data_table():\n        return filtered_data()\n\n    # @render_widget\n    @render.data_frame\n    def data_grid():\n        df = filtered_data()\n        return df #DataGrid(df)\n\n    @render_widget\n    def plotly_histogram():\n        df = filtered_data()\n        bins = input.plotly_bin_count()\n        fig = go.Figure()\n        for species in df['species'].unique():\n            species_data = df[df['species'] == species]\n            fig.add_trace(go.Histogram(\n                x=species_data[input.selected_attribute()],\n                name=species,\n                nbinsx=bins\n            ))\n        fig.update_layout(title='Plotly Histogram', barmode='overlay')\n        return fig\n\n    @output\n    @render.plot\n    def seaborn_histogram():\n        bins = input.seaborn_bin_count()\n        ax = sns.histplot(data=filtered_data(), x=f'{input.selected_attribute()}', bins = int(f'{bins}'),  kde = True, hue='species')\n        ax.set_title('Seaborn Histogram')\n        return ax\n\n    @render_widget\n    def plotly_scatterplot():\n        df = filtered_data()\n        fig = go.Figure()\n        for species in df['species'].unique():\n            species_data = df[df['species'] == species]\n            fig.add_trace(go.Scatter(\n                x=species_data['bill_length_mm'],\n                y=species_data['bill_depth_mm'],\n                mode='markers',\n                name=species,\n                hovertext=species_data['species']\n            ))\n        fig.update_layout(\n            title=\"Scatter Plot\",\n            xaxis_title=\"Bill Length (mm)\",\n            yaxis_title=\"Bill Depth (mm)\"\n        )\n        return fig\n\n    @reactive.calc\n    def filtered_data():\n        return penguins_df[penguins_df['species'].isin(input.selected_species())]\n\napp = App(app_ui, server)\n\nif __name__ == \"__main__\":   \n    app.run()\n", "type": "text"}]