[{"name": "app.py", "content": "\"\"\"\nTeja's Penguin Data Dashboard\n\"\"\"\nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import render_plotly, output_widget, render_widget\nfrom ipydatagrid import DataGrid\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = load_penguins().dropna(axis=0)\n\napp_ui =  ui.page_fluid(\n    ui.page_sidebar(\n        ui.sidebar(\n            ui.h2(\"Sidebar\"),\n            ui.input_selectize(\n                \"selected_attribute\",\n                \"Select Attribute\",\n                [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n            ),\n            ui.input_numeric(                \n                \"plotly_bin_count\",\n                \"Number of Plotly Histogram Bins\",\n                10\n            ),\n            ui.input_slider(\n                'seaborn_bin_count',\n                \"Number of Seaborn Histogram Bins\",\n                5, \n                50,\n                10\n            ),\n            ui.input_checkbox_group(\n                \"selected_species\",\n                \"Select Species\",\n                [\"Adelie\", \"Chinstrap\", \"Gentoo\"],\n                selected=[\"Adelie\", \"Chinstrap\", \"Gentoo\"],\n                inline=True\n            ), \n            ui.hr(),\n            ui.a(\n                'Github', \n                href='https://github.com/vnallam09',\n                target= \"_blank\"\n            )            \n        ),\n        ui.layout_columns(\n            ui.h2('Data Frame (Full)'),\n            ui.h3('Data Grid (Filtered by species)')\n        ),\n        ui.layout_columns(       \n            ui.output_data_frame(\"data_table\"),\n            output_widget(\"data_grid\")\n        ),\n        ui.layout_columns(\n            output_widget(\"plotly_histogram\"),\n            ui.output_plot(\"seaborn_histogram\")\n        ),\n        ui.card(\n            ui.card_header('Plotly Scatter Plot'),\n            output_widget(\"plotly_scatterplot\"),\n            full_screen=True\n        ),\n        title=\"\ud83d\udc27 Teja's Penguin Data Dashboard\"\n    )\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def data_table():\n        return filtered_data()\n\n    @render_widget\n    def data_grid():\n        df = filtered_data()\n        return DataGrid(df)\n\n    @render_widget\n    def plotly_histogram():\n        bins = input.plotly_bin_count()\n        return px.histogram(data_frame=filtered_data(), x=f'{input.selected_attribute()}', nbins=bins, color='species', title='Plotly Histogram')\n\n    @output\n    @render.plot\n    def seaborn_histogram():\n        bins = input.seaborn_bin_count()\n        ax = sns.histplot(data=filtered_data(), x=f'{input.selected_attribute()}', bins = int(f'{bins}'),  kde = True, hue='species')\n        ax.set_title('Seaborn Histogram')\n        return ax\n\n    @render_widget\n    def plotly_scatterplot():\n        return px.scatter(data_frame=filtered_data(), x='bill_length_mm', y='bill_depth_mm', color='species', hover_name='species', size_max=10, title=\"Scatter Plot\")\n\n    @reactive.calc\n    def filtered_data():\n        return penguins_df[penguins_df['species'].isin(input.selected_species())]\n\napp = App(app_ui, server)\n\nif __name__ == \"__main__\":   \n    app.run()\n", "type": "text"}, {"name": "README.md", "content": "# PyShiny Express: Palmer Penguins Dashboard\n\n- Repository: [pyshiny-penguins-dashboard-express](https://github.com/denisecase/pyshiny-penguins-dashboard-express)\n- Live App: [Penguins Dashboard (Express)](https://denisecase.github.io/pyshiny-penguins-dashboard-express/)\n\nRun and publish interactive apps using PyShiny Express and GitHub Pages.\n\nThis is a teaching version of the app written for clarity and understanding.\nTo contribute, please fork the repository and submit a pull request.\n\n## Data Description\n\nThis app uses the Palmer Penguins dataset which includes three penguin species observed on three islands in the Palmer Archipelago, Antarctica.\nThe data has been made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\n\nColumn names for the penguins dataset include:\n\n- species: penguin species (Chinstrap, Adelie, or Gentoo)\n- island: island name (Dream, Torgersen, or Biscoe) in the Palmer Archipelago\n- bill_length_mm: length of the bill in millimeters\n- bill_depth_mm: depth of the bill in millimeters\n- flipper_length_mm: length of the flipper in millimeters\n- body_mass_g: body mass in grams\n- sex: MALE or FEMALE\n\nSee: <https://allisonhorst.github.io/palmerpenguins/>\n\n## Data Cleaning and Transformation\n\nThe data includes some missing values.\nWe generally clean the data by removing rows with missing values and possibly transform the data to use columns that are more easily read (or use labels on charts and tables).\n\n## Source\n\nFrom <https://shiny.posit.co/py/docs/user-interfaces.html>.\nThis version has been modified slightly for hosting with GitHub Pages.\n\n## Prerequisites\n\nBefore you start, have the following installed:\n\n- **Python**: Install the most recent version from [python.org](https://www.python.org/downloads/).\n- **Git**: Download and install Git from [git-scm.com](https://git-scm.com/downloads).\n- **Visual Studio Code (VS Code)**: Download from [code.visualstudio.com](https://code.visualstudio.com/).\n- **VS Code Extensions**: Install the Python extension and the Shiny extension in VS Code.\n\n### Configurations\n\n- **Configure Git**: Set up your user name and email with Git using the following commands in your terminal.\nChange the values to your name and email address. This is a one-time setup.\n\n  ```shell\n  git config --global user.name \"Your Name\"\n  git config --global user.email \"youremail@example.com\"\n  ```\n\n## Set up the Project\n\n### Commands\n\nCommands are operating system-specific.\nThese commands are for Windows users.\nOn Mac/Linux, generally use `python3` instead of `py`.\nEdit your README.md to reflect the commands that work on your machine.\n\n### Verify Installations\n\n1. Open project folder in VS Code.\n2. Open a new terminal - on Windows, ensure the terminal type is PowerShell (not the old cmd)\n3. Run the following commands in the terminal one at a time to verify installations.\n\n```shell\npy --version\ngit --version\ngit config user.name\ngit config user.email\n```\n\n## Python Project Virtual Environment\n\nRun the following commands in the terminal to set up a project virtual environment and install the necessary packages.\nRun them from the root project folder (e.g. pyshiny-penguins-dashboard-express).\nUse PowerShell on Windows or the terminal on macOS and Linux.\n\n### Create a Project Virtual Environment (generally one-time setup)\n\nCreate a project virtual environment in the .venv folder of the project root directory.\n\n  ```shell\n  py -m venv .venv\n  ```\n\nCreating a project virtual environment is generally a one-time setup.\nOnce the folder exists, we can activate it to work on the project.\n\nIf VS Code pops up and says: We noticed a new environment has been created.\nDo you want to select it for the workspace folder? select Yes.\n\n### Activate the Project Virtual Environment (when you work on the project)\n\nOnce the project virtual environment exists,\n we activate the virtual environment to work on the project - or when we open a new terminal.\n\nOn Windows:\n\n  ```shell\n  .venv\\Scripts\\Activate\n  ```\n\nOn macOS and Linux:\n\n  ```shell\n  source .venv/bin/activate\n  ```\n\nVerify: Generally when the environment is active, (.venv) will appear in the terminal prompt.\n\nWe also need to select this project virtual environment in VS Code. To do this:\n\n1. Open the VS Code command palette (Ctrl+Shift+P).\n2. Search for \"Python: Select Interpreter\".\n3. Select the .venv folder in the project root directory.\n\n### Install Packages into the Active Project Virtual Environment\n\nWhen the project virtual environment is active,\ninstall packages into the project virtual environment so they are available for use in the Python code.\n\nNOTE:\n\n- We **install** packages into the project virtual environment.\n- We **import** packages into Python code (after they have been installed).\n\nFirst, upgrade pip and setuptools (core packages) for good measure.\nNOTE: Using the palmerpenguins package requires setuptools.\nThen, install the project-specific required packages.\n\nWith the project virtual environment **active** in the terminal, run the following commands:\n\n```shell\npy -m pip install --upgrade pip setuptools\npy -m pip install --upgrade -r requirements.txt\n```\n\nInstalling packages is generally a one-time setup.\n\n## Run the App\n\nWith your project virtual environment **active** in the terminal\n and the necessary packages installed, run the app with live reloading and\n automatically open it in the browser:\n\n```shell  \nshiny run --reload --launch-browser penguins/app.py\n```\n\nWhile the app is running, that terminal is fully occupied.\nOpen a new terminal to run other commands.\n\n## Build the App to Docs Folder and Test Locally\n\nWith your project virtual environment **active** in the terminal\n and the necessary packages installed, remove any existing assets and use\n shinylive export to build the app in the penguins folder to the docs folder:\n\n```shell\nshiny static-assets remove\nshinylive export penguins docs\n```\n\n**Optional:** Edit docs/index.html to show a custom tab title and add a favicon.\n\nThis optional effort changes the HTML so the GitHub Pages web app will open in a tab with a custom title and favicon image. \nFor it to work, you'll need to first build your own favicon at https://favicon.io/.\nOpen <https://favicon.io/>.\nDesign an icon, e.g. using text & your initials. Set the colors and font. \nSave the file as a zip file and extract (unzip) all the files somewhere on your machine.\nCopy the file named **favicon.ico** file to your project **docs** folder so your html file can find it.  \n\n```html\n    <title>PyShiny Penguins</title>\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"./favicon.ico\">\n```\n\nAfter the app is built, serve the app locally from the docs folder to test before publishing to GitHub Pages.\nIn the terminal, run the following command from the root of the project folder:\n\n```shell\npy -m http.server --directory docs --bind localhost 8008\n```\n\nOpen a browser (tested with Chrome) and navigate to [http://localhost:8008](http://localhost:8008) to view the app running locally.\n\n## After Editing, Git Add/Commit/Push Changes to GitHub\n\nAfter editing project files, use Git add/commit/push changes to the main branch of the repository.\nNote that if a terminal is serving an app, it is not available for other commands.\nRun the following commands from a new or available terminal to git add/commit/push changes to GitHub.\nReplace \"Your commit message\" with a meaningful message about the changes you made to the project files.\nRun commands one at a time and wait for each to complete before running the next.\n\n```shell\ngit add .\ngit commit -m \"Your commit message\"\ngit push -u origin main\n```\n\n## Publish the App with GitHub Pages (one-time setup)\n\nThe first time you set up an app, you'll need to navigate to the repository on GitHub and configure the settings to publish the app with GitHub Pages.\nAfter configuring the repository once, each time you push changes to the main branch, the app will automatically update.\n\n1. Go to the repository on GitHub and navigate to the **Settings** tab.\n2. Scroll down and click the **Pages** section.\n3. Select branch **main** as the source for the site.\n4. Change from the root folder to the **docs** folder to publish from.\n5. Click Save and wait for the site to build.\n6. Edit the \"About\" section of the repository to include a link to the live app.\n\n## Resources\n\nExample csv data from [penguins.csv](https://github.com/mwaskom/seaborn-data/blob/master/penguins.csv).\nUsed for review only. In the app, we import the data from the palmerpenguins package.\n\nPalmer Penguins published in:\n\n- Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer\nArchipelago (Antarctica) penguin data. R package version 0.1.0.\n <https://allisonhorst.github.io/palmerpenguins/>. doi:\n10.5281/zenodo.3960218.\n\nData originally published in:\n\n- Gorman KB, Williams TD, Fraser WR (2014). Ecological sexual dimorphism and environmental variability within a community of Antarctic penguins (genus Pygoscelis). PLoS ONE 9(3):e90081. <https://doi.org/10.1371/journal.pone.0090081>\n\nThe Shiny development team. Shiny for Python [Computer software]. <https://github.com/posit-dev/py-shiny>\n\n## Screenshots\n\nRunning the Shiny for Python app locally on port 8000.\n\n![Running the Shiny for Python app locally](./images/LocalAppRunning.JPG)\n\nServing the static app locally from the **docs** folder (as GitHub Pages will) on port 8008.\nThe browser tab shows a custom tab title and favicon.\nRecommended: Build your own favicon at <https://favicon.io/>.\n\n![Serving the app locally from the docs folder](./images/ServingAppLocally.JPG)\n", "type": "text"}, {"name": "requirements.txt", "content": "faicons\npalmerpenguins\npandas\npyarrow\nplotly\nseaborn\nshiny\nshinylive\nshinywidgets\nipydatagrid", "type": "text"}]